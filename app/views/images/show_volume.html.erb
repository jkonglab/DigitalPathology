<div class="alert alert-info alert-dismissible fade show" role="alert">
	 Volume Rendering is in Progress. It might take couple of minutes....
	<button type="button" class="close" data-dismiss="alert" aria-label="Close">
		<span aria-hidden="true">&times;</span>
	</button>
</div>

<div class="container">
	<%= link_to @image do %>
	<div style="margin-top:30px;" class="btn-raised btn btn-primary">
		<i style="vertical-align:bottom;" class="material-icons" role="presentation">arrow_back</i>Back to 2D
	</div>
	<% end %>
</div>
<div class="container">
	<div style="position: relative; top: 25px; 
		background-color: white; border-radius: 5px; 
		list-style: none; padding: 5px 10px; 
		margin: 0px; display: block; border: 1px solid black; 
		max-height: calc(100% - 60px); 
		overflow: auto;">
		<h>Blend Modes</h>
		<span id="blendMode" class="control-panel">
			<select class="form-select " aria-label="Default select example" id="blendMode">
				<option selected value="0"> Composite</option>
				<option value="1">Maximum Intensity</option>
				<option value="2">Minimum Intensity</option>
			</select>
		</span>
		</br>
		<span>

			<h>Clip</h>
			<table>
				<tbody>
					<tr>
						<td>X</td>
						<td> <input class="Imin" type="range" min="0" max="63" step="1" value="0"> </td>
						<td> <input class="Imax" type="range" min="0" max="63" step="1" value="63"> </td>
					</tr>
					<tr>
						<td>Y</td>
						<td> <input class="Jmin" type="range" min="0" max="63" step="1" value="0"> </td>
						<td> <input class="Jmax" type="range" min="0" max="63" step="1" value="63"> </td>
					</tr>
					<tr>
						<td>Z</td>
						<td> <input class="Kmin" type="range" min="0" max="92" step="1" value="0"> </td>
						<td> <input class="Kmax" type="range" min="0" max="92" step="1" value="92"> </td>
					</tr>
				</tbody>
			</table>
	</div>
</div>
</br>
</br>
<div class="container" id="vtk-container">
	<script type="text/javascript" src="https://unpkg.com/@babel/polyfill@7.0.0/dist/polyfill.js"></script>
	<script type="text/javascript" src="https://unpkg.com/vtk.js"></script>
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
	<script type="text/javascript">

		// var fullScreenRenderer = vtk.Rendering.Misc.vtkFullScreenRenderWindow.newInstance()
		var ofun = vtk.Common.DataModel.vtkPiecewiseFunction.newInstance();
		var ctfun = vtk.Rendering.Core.vtkColorTransferFunction.newInstance();
		var actor = vtk.Rendering.Core.vtkVolume.newInstance();
		var mapper = vtk.Rendering.Core.vtkVolumeMapper.newInstance();
		var xmlImageDataReader = vtk.IO.XML.vtkXMLImageDataReader.newInstance();
		var openglRenderWindow = vtk.Rendering.OpenGL.vtkRenderWindow.newInstance();
		var renderWindow = vtk.Rendering.Core.vtkRenderWindow.newInstance();
		var interactor = vtk.Rendering.Core.vtkRenderWindowInteractor.newInstance();
		var renderer = vtk.Rendering.Core.vtkRenderer.newInstance();
		var cropFilter = vtk.Filters.General.vtkImageCropFilter.newInstance();


		// var fullScreenRenderer = vtk.Rendering.Misc.vtkFullScreenRenderWindow.newInstance({
		//     background: [0.3, 0.3, 0.3],
		// });

		// var renderer = fullScreenRenderer.getRenderer();
		// var renderWindow = fullScreenRenderer.getRenderWindow();


		renderWindow.addRenderer(renderer);
		renderWindow.addView(openglRenderWindow);

		function setupControlPanel(data, cropFilter) {
			const axes = ['I', 'J', 'K'];
			const minmax = ['min', 'max'];

			const extent = data.getExtent();

			axes.forEach((ax, axi) => {
				minmax.forEach((m, mi) => {
					const el = document.querySelector(`.${ax}${m}`);
					console.log(el);
					el.setAttribute('min', extent[axi * 2]);
					el.setAttribute('max', extent[axi * 2 + 1]);
					el.setAttribute('value', extent[axi * 2 + mi]);

					el.addEventListener('input', () => {
						const planes = cropFilter.getCroppingPlanes().slice();
						planes[axi * 2 + mi] = Number(el.value);
						cropFilter.setCroppingPlanes(...planes);
						console.log(planes);
						renderWindow.render();
					});
				});
			});
		}

		var container = document.createElement('div');
		container.style.height = '500px';
		document.getElementById('vtk-container').appendChild(container);
		openglRenderWindow.setContainer(container);

		const { width, height } = container.getBoundingClientRect();
		console.log(width, height)
		openglRenderWindow.setSize(width, height);


		interactor.setView(openglRenderWindow);
		interactor.initialize();
		interactor.bindEvents(container);

		interactor.setInteractorStyle(vtk.Interaction.Style.vtkInteractorStyleTrackballCamera.newInstance());

		mapper.setSampleDistance(1.3);
		actor.setMapper(mapper);

		ofun.addPoint(-3024, 0.1);
		ofun.addPoint(-637.62, 0.1);
		ofun.addPoint(700, 0.5);
		ofun.addPoint(3071, 0.9);

		ctfun.addRGBPoint(0, 0, 0, 0);
		ctfun.addRGBPoint(255, 1.0, 1.0, 1.0);

		actor.getProperty().setRGBTransferFunction(0, ctfun);
		actor.getProperty().setInterpolationTypeToLinear();
		actor.getProperty().setIndependentComponents(0);

		cropFilter.setInputConnection(xmlImageDataReader.getOutputPort())
		mapper.setInputConnection(cropFilter.getOutputPort());

		function updateBlendMode(event) {
			console.log(event);
			const blendMode = parseInt(event.target.value, 10);
			console.log(blendMode)

			mapper.setBlendMode(blendMode);

			renderWindow.render();
		}


		var image_folder = <%= @image.id%>
		var file_path = 'http://localhost:3000/data/test_images/' + image_folder + '/volume.vti';
		console.log(file_path);

		xmlImageDataReader.setUrl(file_path).then(() => {
			xmlImageDataReader.loadData().then(() => {
				renderer.addVolume(actor);
				const data = xmlImageDataReader.getOutputData();
				cropFilter.setCroppingPlanes(...data.getExtent());

				setupControlPanel(data, cropFilter);
				const interactor = renderWindow.getInteractor();
				interactor.setDesiredUpdateRate(15.0);
				console.log(interactor);
				renderer.resetCamera();
				renderer.getActiveCamera().elevation(-70);
				renderWindow.render();

				const el = document.querySelector('#blendMode');
				el.addEventListener('change', updateBlendMode);
				el.addEventListener('change', updateBlendMode);

			});
		});

	</script>

</div>