<div class="bmd-layout-container bmd-drawer-f-l bmd-drawer-in">
    <div id="viewer-sidebar" class="bmd-layout-drawer bg-faded" aria-expanded="false" aria-hidden="false">
    <span data-tab="drawer-home" class="drawer-link" style="padding:15px;">
          <a href="/runs"><i style="vertical-align:bottom;" class="material-icons" role="presentation">arrow_back</i>
          <span>Back to All Analyses</span></a>
    </span>
    <header>
       <span style="white-space:pre-wrap;" class="navbar-brand">Landmarks</span>
    </header>
    <ul class="list-group">
        <a  class="save-landmarks list-group-item">
          <i class="material-icons" role="presentation">save</i>Save
        </a>
        <a  class="clear-canvas list-group-item">
          <i class="material-icons" role="presentation">delete</i>Clear
        </a>
        <div class="save-file" style="padding:15px;">
          <%= form_for :run,  url: {action: :create} do |f| %>
              <%= f.hidden_field :image_id, value: @image.id %>
              <%= f.hidden_field :algorithm_id, value:  Algorithm.where(:title=>"CPU::3D Generate Registered Images").first.id %>
              <%= f.submit 'Generate Transformations', :style=>'float:right', :class=>"btn-raised btn btn-success"%>
          <% end %>
        </div>
    </ul>
    </div>

    <div class="bmd-layout-content" style="background:#eee;">
        <div style="height:20px;" class="row">
            <div id="openseadragon-title1" class="col"></div>
            <div id="openseadragon-title2" class="col"></div>
        </div>
        <div style="height:100%;" class="row">
            <div id="openseadragon-container1" class="col"></div>
            <div id="openseadragon-container2" class="col"></div>
            <div class="col-2 slider-container">
                <button id="slideUp"><i class="material-icons" role="presentation">arrow_drop_up</i></button>
                <input id="sliceNavigator" class="form-control" type="text" data-slider-min="1" data-slider-max="<%=@slices.length-1%>" data-slider-step="1" data-slider-value="1" data-slider-orientation="vertical"/>    

                <button id="slideDown"><i class="material-icons" role="presentation">arrow_drop_down</i></button>
                <span id="sliderValLabel">Current Target: <span id="sliderVal">1</span></span>
            </div>
        </div>
    </div>
    <div style="position: fixed; bottom: 0; width: 150; right: 0; z-index: 100; color:white; background: rgba(0,0,0,.5); padding: 5px; text-align: center;" class="position-box">
        x: <span id="position-text-x"></span><br/>
        y: <span id="position-text-y"></span>
    </div>
</div>

<script>

var results = JSON.parse('<%= raw(@results.pluck(:raw_data).to_json)%>');

function setImageTitle(divSelector, value) {
    document.querySelector(divSelector).innerHTML = value;
}

$('.clear-canvas').click(function(){
    clearAllElements();
});

$('.save-landmarks').click(function(){
    saveElements("Landmark points saved!");
});

var point_array_1 = [];
var point_array_2 = [];
var image_id = 0;
var timeout;
var ref_image_url = "/<%= @ref_image.dzi_url %>";
var ref_image_id = <%= @ref_image.id%>;
var target_image_url = "/<%= @target_image.dzi_url %>";
var target_image_id = <%= @target_image.id %>;
var target_height = <%=@target_image.height%>;
var target_width = <%=@target_image.width%>;
var ref_height = <%=@ref_image.height%>;
var ref_width = <%=@ref_image.width%>;

setImageTitle("#openseadragon-title1", "Slice order:1");
setImageTitle("#openseadragon-title2", "Slice order:2");

var viewer1 = OpenSeadragon({
    id: "openseadragon-container1",
    tileSources:  [
    {
      tileSource: target_image_url,
      width: 1
    }
  ],
    prefixUrl:  "/openseadragon/images/",
    maxZoomPixelRatio: 2.0,
    minPixelRatio: 0.5,
    timeout: 100000,
    imageLoaderLimit: 7
});

var viewer2 = OpenSeadragon({
    id: "openseadragon-container2",
    tileSources:  [
    {
      tileSource: ref_image_url,
      width: 1
    }
  ],
    prefixUrl:  "/openseadragon/images/",
    maxZoomPixelRatio: 2.0,
    minPixelRatio: 0.5,
    timeout: 100000,
    imageLoaderLimit: 7
});

viewer1.gestureSettingsMouse.clickToZoom = false;
viewer2.gestureSettingsMouse.clickToZoom = false;

var overlay1;
var overlay2;

var mouse_tracker1 = new OpenSeadragon.MouseTracker({
    element: viewer1.canvas,
    moveHandler: function(event){
        var imagePoint = viewer1.viewport.viewerElementToImageCoordinates(event.position);
        if(imagePoint.x >=0 && imagePoint.x <=target_width  && imagePoint.y >=0 && imagePoint.y <= target_height){
            $('#position-text-x').html(String(imagePoint.x.toFixed(2)));
            $('#position-text-y').html(String(imagePoint.y.toFixed(2)));
        }else{
            $('#position-text-x').html("");
            $('#position-text-y').html("");
        }
    },
    clickHandler:  function(event) {
    if(event.quick){
        var HTMLid = "t-"+(point_array_1.length+1).toString();
        var viewportPoint = viewer1.viewport.pointFromPixel(event.position);
        var imagePoint = viewer1.viewport.viewportToImageCoordinates(viewportPoint);
        drawMarker(viewportPoint, imagePoint, overlay1 , HTMLid, viewer1, point_array_1);
      }
    }
}).setTracking(true);


var mouse_tracker2 = new OpenSeadragon.MouseTracker({
    element: viewer2.canvas,
    moveHandler: function(event){
        var imagePoint = viewer2.viewport.viewerElementToImageCoordinates(event.position);
        if(imagePoint.x >=0 && imagePoint.x <=ref_width  && imagePoint.y >=0 && imagePoint.y <= ref_height){
            $('#position-text-x').html(String(imagePoint.x.toFixed(2)));
            $('#position-text-y').html(String(imagePoint.y.toFixed(2)));
        }else{
            $('#position-text-x').html("");
            $('#position-text-y').html("");
        }
    },
    clickHandler: function(event) {
    if(event.quick){
        var HTMLid = "r-"+(point_array_2.length+1).toString();
        var viewportPoint = viewer2.viewport.pointFromPixel(event.position);
        var imagePoint = viewer2.viewport.viewportToImageCoordinates(viewportPoint);
        drawMarker(viewportPoint, imagePoint, overlay2, HTMLid, viewer2, point_array_2);
      }
    }
}).setTracking(true);


//Create a marker to draw and assign it the drag handler
function drawMarker(viewportPoint, imagePoint, overlay, HTMLid, viewerObj, points_array){

    var point = {};
    point["id"] = HTMLid;
    point["x"] = (imagePoint.x).toString();
    point["y"] = (imagePoint.y).toString();

    points_array.push(point);

    var tip = d3.tip()
      .attr('class', 'd3-tip')
      .style("z-index", "999")
      .offset([-10, 0])
      .html(HTMLid);

    var elem = d3.select(viewerObj.svgOverlay().node());

    var elemEnter = elem.append("g")
            .attr("id",HTMLid).attr('class','points')
            .attr('transform','translate(' + 0 + ',' + 0 + ')');
    
    var circle = elemEnter.append("circle")
                        .style('fill', '#00FF00')
                        .attr("cx", viewportPoint.x)
                        .attr("cy", viewportPoint.y)
                        .attr("r", 0.005)
                        .on('mouseover', tip.show)
                        .on('mouseout', tip.hide);

    circle.call(tip);

    d3.select("#"+HTMLid.toString()).each(function() { 
        var node = this;
        new OpenSeadragon.MouseTracker({
        element: node,
        dragHandler: function(event){
            var viewportDelta = viewerObj.viewport.deltaPointsFromPixels(event.delta); 
            var d3node = d3.select(node); 
            var transformobj= transformToObject(d3node.attr('transform'));
            transformobj.translate[0]=Number(transformobj.translate[0])+Number(viewportDelta.x);
            transformobj.translate[1]=Number(transformobj.translate[1])+Number(viewportDelta.y);
            d3node.attr("transform",objectToTransform(transformobj));
        },
        dragEndHandler: function(event){
            var cx = d3.select(node).selectAll("circle").attr("cx");
            var cy = d3.select(node).selectAll("circle").attr("cy");
            var d3node = d3.select(node); 
            var transformobj= transformToObject(d3node.attr('transform'));
            var viewportPoint = viewerObj.viewport.pointFromPixel(event.position);
            var imagePoint = viewerObj.viewport.viewportToImageCoordinates(parseFloat(cx)+parseFloat(transformobj.translate[0]), parseFloat(cy)+parseFloat(transformobj.translate[1]));
            updatePointsArray(points_array, imagePoint, HTMLid);
        },
        dblClickHandler: function(event){
          tip.hide();
          deletePointPairs(HTMLid);
        }
    }).setTracking(true);
   });
}

function updatePointsArray(points_array, imagePoint, HTMLid){
  for (i = 0; i < points_array.length; i++) {
    if (points_array[i]["id"] == HTMLid)
    {
        points_array[i]["x"] = (imagePoint.x).toString();
        points_array[i]["y"] = (imagePoint.y).toString();
        break;
    }
  }
}

function transformToObject(transformStr)
{
    var b={};
    for (var i in a = transformStr.match(/(\w+\((\-?\d+\.?\d*e?\-?\d*,?)+\))+/g))
    {
      var c = a[i].match(/[\w\.\-]+/g);
      b[c.shift()] = c;
    }
    return b;
}

function objectToTransform(tobj){
        var jsonstr=JSON.stringify(tobj);
        jsonstr=jsonstr.replace("{","");
        jsonstr=jsonstr.replace("}","");
        jsonstr=jsonstr.replace(/("|:)/g, "");
        jsonstr=jsonstr.replace("[","(");
        jsonstr=jsonstr.replace("]",")");
        return jsonstr;
    }

function clearAllElements()
{
    d3.select(viewer1.svgOverlay().node()).selectAll('g').remove();
    d3.select(viewer2.svgOverlay().node()).selectAll('g').remove();
    // clear arrays
    point_array_1 = [];
    point_array_2 = [];
}

function saveElements(message)
{
  console.log("here");
  //check if both images have landmarks pairs
  if(point_array_1.length > 0 && point_array_2.length > 0 && point_array_1.length == point_array_2.length )
  {
    console.log(JSON.stringify(point_array_1));
    $.post( '<%= landmarks_path %>.json', {
            'parent_id': <%= @image.id %>,
            'image_id': target_image_id,
            'ref_image_id': ref_image_id,
            'image_data': JSON.stringify(point_array_1),
            'ref_image_data': JSON.stringify(point_array_2)
         }).done(function() {
            alert( message );
         });
  }
  else
  {
    alert( "No points or missing point pair" );
  }
}

function deletePointPairs(HTMLid)
{
    var length = HTMLid.length;
    var id  = HTMLid.substring(2, length);

    d3.select("#t-"+id).remove();
    d3.select("#r-"+id).remove();

    //update arrays
    var index = point_array_1.findIndex(x => x.id === "#t-"+id);
    point_array_1.splice(index, 1);
    index = point_array_2.findIndex(x => x.id === "#r-"+id);
    point_array_2.splice(index, 1);;

    //saveElements("Landmarks points deleted!");
    alert("Please click ok to confirm the delete");
}

function setTargetResults(results, target_slice_num)
{
    array_1 = results[0][target_slice_num]["target_landmarks"];
    for (i = 0; i < array_1.length; i++) {
        var HTMLid = "t-"+(i+1).toString();
        var viewportPoint = viewer1.viewport.imageToViewportCoordinates(array_1[i][0], array_1[i][1]);
        var imagePoint = {"x":array_1[i][0], "y":array_1[i][1]};
        drawMarker(viewportPoint, imagePoint, overlay1 , HTMLid, viewer1, point_array_1);
    }
}


function setRefResults(results, target_slice_num)
{
    array_2 = results[0][target_slice_num]["ref_landmarks"];
    for (i = 0; i < array_2.length; i++) {
        var HTMLid = "r-"+(i+1).toString();
        var viewportPoint = viewer2.viewport.imageToViewportCoordinates(array_2[i][0], array_2[i][1]);
        var imagePoint = {"x":array_2[i][0], "y":array_2[i][1]};
        drawMarker(viewportPoint, imagePoint, overlay2 , HTMLid, viewer2, point_array_2);
    }
}

var changeSlide  = function() {
    var target_slice_num = slice_slider.bootstrapSlider('getValue');
    var ref_slice_num = target_slice_num+1;
    clearAllElements();
    setImageTitle("#openseadragon-title1", "Slide order:"+target_slice_num.toString());
    setImageTitle("#openseadragon-title2", "Slide order:"+ref_slice_num.toString());

    $.ajax({
        url: "/images/<%=@image.id%>/get_slice?slice="+target_slice_num.toString()
    }).done(function(data){
        target_image_url = data.dzi_url;
        target_image_id = data.id;
        target_height = data.height;
        target_width = data.width;
        viewer1.open('/'+data.dzi_url);
    });
    overlay1 = viewer1.svgOverlay(); 
    $.ajax({
        url: "/images/<%=@image.id%>/get_slice?slice="+ref_slice_num.toString()
    }).done(function(data){
        ref_image_url = data.dzi_url;
        ref_image_id = data.id;
        ref_height = data.height;
        ref_width = data.width;
        viewer2.open('/'+data.dzi_url);
    });
    overlay2 = viewer2.svgOverlay();
    setTargetResults(results, target_slice_num-1);
    setRefResults(results, target_slice_num-1);
};

var slice_slider = $("#sliceNavigator").bootstrapSlider({reversed : true}).on('change', changeSlide);

$("#sliceNavigator").on("slide", function(slideEvt) {
    $("#sliderVal").text(slideEvt.value);
});

$('#slideUp').bind('click', function(){
    var currentSlide = slice_slider.bootstrapSlider('getValue');
    if(currentSlide < <%=@slices.length%>){
        slice_slider.bootstrapSlider('setValue', currentSlide + 1, true, true);
    }
});

$('#slideDown').bind('click', function(){
    var currentSlide = slice_slider.bootstrapSlider('getValue');
    if(currentSlide > 0){
       slice_slider.bootstrapSlider('setValue', currentSlide - 1, true, true);
    }
});

</script>